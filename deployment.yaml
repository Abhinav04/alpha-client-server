AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This Cloudformation template sets up Alpha-client-server deployment

Parameters:
  VpcCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 172.31.0.0/16
    
  PublicSubnet1CIDR:
    Description: Public Subnet 1
    Type: String
    Default: 172.31.32.0/20
  
  PublicSubnet2CIDR:
    Description: Public Subnet 2
    Type: String
    Default: 172.31.64.0/20
    
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Keyname for the keypair used to SSH into EC2 instances
  
  YourCurrentIp:
    Type: String
    Description: SSH access will be provided to this IP. Please enter your system's current public IP.
  
  InstanceType:
    Description: Instance size
    Type : String
    Default: t2.medium
  


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
    DependsOn: VPC
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
    DependsOn: VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
    DependsOn: VPC

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ec2 instance security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - Description: All access inside VPC
          IpProtocol: -1
          CidrIp: !GetAtt VPC.CidrBlock
        - Description: SSH access
          IpProtocol: tcp
          CidrIp: !Ref YourCurrentIp
          FromPort: 22
          ToPort: 22

  EC2InstanceServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2}}"
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
      - DeviceIndex: '0'
        AssociatePublicIpAddress: 'true'
        GroupSet: [!Ref Ec2SecurityGroup]
        SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          Content-Type: multipart/mixed; boundary="//"
          MIME-Version: 1.0

          --//
          Content-Type: text/cloud-config; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="cloud-config.txt"

          #cloud-config
          cloud_final_modules:
          - [scripts-user, always]

          --//
          Content-Type: text/x-shellscript; charset="us-ascii"
          MIME-Version: 1.0
          Content-Transfer-Encoding: 7bit
          Content-Disposition: attachment; filename="userdata.txt"

          #!/bin/bash
          sudo echo nameserver 8.8.8.8 > /etc/resolv.conf
          sudo pip3 install flask
          mkdir -p /alpha_clients

          cat <<'EOT' > /app.py
          #Server flask web app
          from flask import Flask, request, jsonify
          import os
          from jinja2 import Template
          
          app = Flask(__name__)
          
          @app.route('/report-data',methods=['POST'])
          def record_ssh_attempts():
              data = request.json
              f = open("alpha_clients/" + data["node_hostname"] + ".txt", "w")
              f.write(data['ssh_attempts'] + " ssh log-in attempts were made at " + data["node_hostname"])
              f.close()
              print(data)
              return jsonify(data)
          
          @app.route('/get-data',methods=['POST'])
          def display_ssh_attempts():
              node_files = os.listdir("alpha_clients")
              data_list=[]
              for file in node_files:
                  f = open("alpha_clients/" + file)
                  data_list.append(f.read())
                  f.close()
              metrics_template = Template("{% for data in data_list %}{{data}}\n {% endfor %}")
              return metrics_template.render(data_list=data_list)
          
          # main driver function
          if __name__ == '__main__':
          	app.run(host='0.0.0.0', port=5000)
          EOT
          
          sudo chmod 755 /app.py
          
          python3 /app.py
          --//--
  
  # EC2InstanceClient:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref InstanceType
  #     ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2}}"
  #     KeyName: !Ref KeyPair
  #     NetworkInterfaces: 
  #     - DeviceIndex: '0'
  #       AssociatePublicIpAddress: 'true'
  #       GroupSet: [!Ref Ec2SecurityGroup]
  #       SubnetId: !Ref PublicSubnet2
  #     UserData:
  #       Fn::Base64: !Sub 
  #       - |
  #         Content-Type: multipart/mixed; boundary="//"
  #         MIME-Version: 1.0
          
  #         --//
  #         Content-Type: text/cloud-config; charset="us-ascii"
  #         MIME-Version: 1.0
  #         Content-Transfer-Encoding: 7bit
  #         Content-Disposition: attachment; filename="cloud-config.txt"
          
  #         #cloud-config
  #         cloud_final_modules:
  #         - [scripts-user, always]
          
  #         --//
  #         Content-Type: text/x-shellscript; charset="us-ascii"
  #         MIME-Version: 1.0
  #         Content-Transfer-Encoding: 7bit
  #         Content-Disposition: attachment; filename="userdata.txt"
          
  #         #!/bin/bash
  #         sudo echo nameserver 8.8.8.8 > /etc/resolv.conf
  #         sudo amazon-linux-extras install epel -y
  #         sudo yum update -y
  #         sudo yum install inotify-tools -y
          
  #         cat <<'EOT' > /trigger.sh
  #         #!/bin/sh
  #         #intofiywait - watch for file modification
  #         while inotifywait -e modify /var/log/secure; do
  #           /send_data.sh
  #         done
  #         EOT
  #         sudo chmod 755 /trigger.sh
          
  #         cat <<'EOT' > /send_data.sh
  #         #!/bin/sh
  #         attempts=$(journalctl _SYSTEMD_UNIT=sshd.service | egrep -o "sshd\[[0-9]*\]: (Failure|Accepted|Invalid)" | wc -l)
  #         node_hostname=$(hostname)
  #         echo $attempts
  #         echo $node_hostname
  #         curl -i -H "Content-Type: application/json" -X POST -d "{\"node_hostname\":\"$node_hostname\", \"ssh_attempts\":\"$attempts\"}" http://${ServerIp}:5000/report-data
  #         EOT
  #         sudo chmod 755 /send_data.sh
          
  #         /trigger.sh
  #         --//--
  #       - ServerIp:
  #           !GetAtt EC2InstanceServer.PrivateIp
  
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        InstanceType: !Ref InstanceType
        ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2}}"
        KeyName: !Ref KeyPair
        SecurityGroupIds: 
          - !Ref Ec2SecurityGroup
        UserData:
          Fn::Base64: !Sub 
          - |
            Content-Type: multipart/mixed; boundary="//"
            MIME-Version: 1.0
            
            --//
            Content-Type: text/cloud-config; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="cloud-config.txt"
            
            #cloud-config
            cloud_final_modules:
            - [scripts-user, always]
            
            --//
            Content-Type: text/x-shellscript; charset="us-ascii"
            MIME-Version: 1.0
            Content-Transfer-Encoding: 7bit
            Content-Disposition: attachment; filename="userdata.txt"
            
            #!/bin/bash
            sudo echo nameserver 8.8.8.8 > /etc/resolv.conf
            sudo amazon-linux-extras install epel -y
            sudo yum update -y
            sudo yum install inotify-tools -y
            
            cat <<'EOT' > /trigger.sh
            #!/bin/sh
            #intofiywait - watch for file modification
            while inotifywait -e modify /var/log/secure; do
              /send_data.sh
            done
            EOT
            sudo chmod 755 /trigger.sh
            
            cat <<'EOT' > /send_data.sh
            #!/bin/sh
            attempts=$(journalctl _SYSTEMD_UNIT=sshd.service | egrep -o "sshd\[[0-9]*\]: (Failure|Accepted|Invalid)" | wc -l)
            node_hostname=$(hostname)
            echo $attempts
            echo $node_hostname
            curl -i -H "Content-Type: application/json" -X POST -d "{\"node_hostname\":\"$node_hostname\", \"ssh_attempts\":\"$attempts\"}" http://${ServerIp}:5000/report-data
            EOT
            sudo chmod 755 /send_data.sh
            
            /trigger.sh
            --//--
          - ServerIp:
              !GetAtt EC2InstanceServer.PrivateIp
  Asg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 3
      MinSize: 3
      MaxSize: 3
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      TerminationPolicies:
        - OldestLaunchTemplate
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

Outputs:
  WebServerIp:
    Description: EC2 instance id
    Value: !GetAtt EC2InstanceServer.PublicIp